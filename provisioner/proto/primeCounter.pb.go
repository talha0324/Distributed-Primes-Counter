// Code generated by protoc-gen-go. DO NOT EDIT.
// source: primeCounter.proto

package primer

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PrimeCounterPayload struct {
	From                 int32    `protobuf:"varint,1,opt,name=from,proto3" json:"from,omitempty"`
	Until                int32    `protobuf:"varint,2,opt,name=until,proto3" json:"until,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrimeCounterPayload) Reset()         { *m = PrimeCounterPayload{} }
func (m *PrimeCounterPayload) String() string { return proto.CompactTextString(m) }
func (*PrimeCounterPayload) ProtoMessage()    {}
func (*PrimeCounterPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_996d54a7094dba1b, []int{0}
}

func (m *PrimeCounterPayload) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrimeCounterPayload.Unmarshal(m, b)
}
func (m *PrimeCounterPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrimeCounterPayload.Marshal(b, m, deterministic)
}
func (m *PrimeCounterPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrimeCounterPayload.Merge(m, src)
}
func (m *PrimeCounterPayload) XXX_Size() int {
	return xxx_messageInfo_PrimeCounterPayload.Size(m)
}
func (m *PrimeCounterPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_PrimeCounterPayload.DiscardUnknown(m)
}

var xxx_messageInfo_PrimeCounterPayload proto.InternalMessageInfo

func (m *PrimeCounterPayload) GetFrom() int32 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *PrimeCounterPayload) GetUntil() int32 {
	if m != nil {
		return m.Until
	}
	return 0
}

type PrimeCounterReply struct {
	Total                int32    `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrimeCounterReply) Reset()         { *m = PrimeCounterReply{} }
func (m *PrimeCounterReply) String() string { return proto.CompactTextString(m) }
func (*PrimeCounterReply) ProtoMessage()    {}
func (*PrimeCounterReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_996d54a7094dba1b, []int{1}
}

func (m *PrimeCounterReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrimeCounterReply.Unmarshal(m, b)
}
func (m *PrimeCounterReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrimeCounterReply.Marshal(b, m, deterministic)
}
func (m *PrimeCounterReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrimeCounterReply.Merge(m, src)
}
func (m *PrimeCounterReply) XXX_Size() int {
	return xxx_messageInfo_PrimeCounterReply.Size(m)
}
func (m *PrimeCounterReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PrimeCounterReply.DiscardUnknown(m)
}

var xxx_messageInfo_PrimeCounterReply proto.InternalMessageInfo

func (m *PrimeCounterReply) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

type TotalPrimesResponse struct {
	Total                int32    `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	BatchID              string   `protobuf:"bytes,2,opt,name=batchID,proto3" json:"batchID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TotalPrimesResponse) Reset()         { *m = TotalPrimesResponse{} }
func (m *TotalPrimesResponse) String() string { return proto.CompactTextString(m) }
func (*TotalPrimesResponse) ProtoMessage()    {}
func (*TotalPrimesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_996d54a7094dba1b, []int{2}
}

func (m *TotalPrimesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TotalPrimesResponse.Unmarshal(m, b)
}
func (m *TotalPrimesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TotalPrimesResponse.Marshal(b, m, deterministic)
}
func (m *TotalPrimesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TotalPrimesResponse.Merge(m, src)
}
func (m *TotalPrimesResponse) XXX_Size() int {
	return xxx_messageInfo_TotalPrimesResponse.Size(m)
}
func (m *TotalPrimesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TotalPrimesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TotalPrimesResponse proto.InternalMessageInfo

func (m *TotalPrimesResponse) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *TotalPrimesResponse) GetBatchID() string {
	if m != nil {
		return m.BatchID
	}
	return ""
}

type SimpleReply struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SimpleReply) Reset()         { *m = SimpleReply{} }
func (m *SimpleReply) String() string { return proto.CompactTextString(m) }
func (*SimpleReply) ProtoMessage()    {}
func (*SimpleReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_996d54a7094dba1b, []int{3}
}

func (m *SimpleReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SimpleReply.Unmarshal(m, b)
}
func (m *SimpleReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SimpleReply.Marshal(b, m, deterministic)
}
func (m *SimpleReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleReply.Merge(m, src)
}
func (m *SimpleReply) XXX_Size() int {
	return xxx_messageInfo_SimpleReply.Size(m)
}
func (m *SimpleReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleReply.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleReply proto.InternalMessageInfo

func (m *SimpleReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*PrimeCounterPayload)(nil), "primer.PrimeCounterPayload")
	proto.RegisterType((*PrimeCounterReply)(nil), "primer.PrimeCounterReply")
	proto.RegisterType((*TotalPrimesResponse)(nil), "primer.TotalPrimesResponse")
	proto.RegisterType((*SimpleReply)(nil), "primer.SimpleReply")
}

func init() { proto.RegisterFile("primeCounter.proto", fileDescriptor_996d54a7094dba1b) }

var fileDescriptor_996d54a7094dba1b = []byte{
	// 254 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x51, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x6d, 0x11, 0x4d, 0xd5, 0x63, 0xe2, 0x52, 0xa4, 0x50, 0x16, 0xe4, 0x05, 0x58, 0x32, 0x94,
	0x0f, 0x60, 0x28, 0x0c, 0x30, 0x15, 0xb7, 0x12, 0x03, 0x93, 0x4b, 0x0f, 0x88, 0x70, 0x6c, 0x63,
	0x3b, 0x43, 0xff, 0x1e, 0xe5, 0x42, 0x44, 0x84, 0xbc, 0xdd, 0xbb, 0xf7, 0xfc, 0x9e, 0xef, 0x0e,
	0xd0, 0xf9, 0xaa, 0xa6, 0x95, 0x6d, 0x4c, 0x24, 0x5f, 0x3a, 0x6f, 0xa3, 0xc5, 0x8c, 0x7b, 0x5e,
	0xdc, 0x41, 0xbe, 0x1e, 0xb0, 0x6b, 0x75, 0xd0, 0x56, 0xed, 0x11, 0xe1, 0xf8, 0xdd, 0xdb, 0xba,
	0x18, 0x5f, 0x8e, 0xaf, 0x27, 0x92, 0x6b, 0x9c, 0xc3, 0xa4, 0x31, 0xb1, 0xd2, 0xc5, 0x11, 0x37,
	0x3b, 0x20, 0x6e, 0xe0, 0x74, 0x68, 0x20, 0xc9, 0xe9, 0x43, 0x2b, 0x8d, 0x36, 0x2a, 0xfd, 0xfb,
	0xbe, 0x03, 0xe2, 0x01, 0xf2, 0x6d, 0x5b, 0xb0, 0x3e, 0x48, 0x0a, 0xce, 0x9a, 0x40, 0x69, 0x31,
	0x16, 0x30, 0xdd, 0xa9, 0xf8, 0xf6, 0xf9, 0x78, 0xcf, 0x79, 0x33, 0xd9, 0x43, 0x71, 0x05, 0x27,
	0x9b, 0xaa, 0x76, 0x9a, 0xba, 0xac, 0x02, 0xa6, 0x35, 0x85, 0xa0, 0x3e, 0x88, 0x0d, 0x66, 0xb2,
	0x87, 0xcb, 0x57, 0xc8, 0x56, 0xba, 0x22, 0x13, 0xf1, 0x19, 0xce, 0x36, 0x64, 0xf6, 0x7f, 0x1f,
	0x95, 0xf4, 0xdd, 0x50, 0x88, 0x78, 0x51, 0x76, 0x7b, 0x28, 0x13, 0x4b, 0x58, 0x9c, 0xa7, 0x48,
	0x0e, 0x15, 0xa3, 0xe5, 0x16, 0xb2, 0x17, 0xeb, 0xbf, 0xc8, 0xe3, 0x13, 0xcc, 0xff, 0x9b, 0x87,
	0x46, 0x0f, 0xbc, 0x13, 0x43, 0x2f, 0xf2, 0x9e, 0x1c, 0x8c, 0x22, 0x46, 0xbb, 0x8c, 0xaf, 0x73,
	0xfb, 0x13, 0x00, 0x00, 0xff, 0xff, 0xdf, 0xfd, 0xaa, 0x98, 0xb3, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ClientClient is the client API for Client service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClientClient interface {
	SendPrimeCountRequest(ctx context.Context, in *PrimeCounterPayload, opts ...grpc.CallOption) (*PrimeCounterReply, error)
}

type clientClient struct {
	cc *grpc.ClientConn
}

func NewClientClient(cc *grpc.ClientConn) ClientClient {
	return &clientClient{cc}
}

func (c *clientClient) SendPrimeCountRequest(ctx context.Context, in *PrimeCounterPayload, opts ...grpc.CallOption) (*PrimeCounterReply, error) {
	out := new(PrimeCounterReply)
	err := c.cc.Invoke(ctx, "/primer.Client/SendPrimeCountRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientServer is the server API for Client service.
type ClientServer interface {
	SendPrimeCountRequest(context.Context, *PrimeCounterPayload) (*PrimeCounterReply, error)
}

// UnimplementedClientServer can be embedded to have forward compatible implementations.
type UnimplementedClientServer struct {
}

func (*UnimplementedClientServer) SendPrimeCountRequest(ctx context.Context, req *PrimeCounterPayload) (*PrimeCounterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPrimeCountRequest not implemented")
}

func RegisterClientServer(s *grpc.Server, srv ClientServer) {
	s.RegisterService(&_Client_serviceDesc, srv)
}

func _Client_SendPrimeCountRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrimeCounterPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServer).SendPrimeCountRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/primer.Client/SendPrimeCountRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServer).SendPrimeCountRequest(ctx, req.(*PrimeCounterPayload))
	}
	return interceptor(ctx, in, info, handler)
}

var _Client_serviceDesc = grpc.ServiceDesc{
	ServiceName: "primer.Client",
	HandlerType: (*ClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendPrimeCountRequest",
			Handler:    _Client_SendPrimeCountRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "primeCounter.proto",
}

// WorkerClient is the client API for Worker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WorkerClient interface {
	SendPrimeCountResult(ctx context.Context, in *TotalPrimesResponse, opts ...grpc.CallOption) (*SimpleReply, error)
}

type workerClient struct {
	cc *grpc.ClientConn
}

func NewWorkerClient(cc *grpc.ClientConn) WorkerClient {
	return &workerClient{cc}
}

func (c *workerClient) SendPrimeCountResult(ctx context.Context, in *TotalPrimesResponse, opts ...grpc.CallOption) (*SimpleReply, error) {
	out := new(SimpleReply)
	err := c.cc.Invoke(ctx, "/primer.Worker/SendPrimeCountResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkerServer is the server API for Worker service.
type WorkerServer interface {
	SendPrimeCountResult(context.Context, *TotalPrimesResponse) (*SimpleReply, error)
}

// UnimplementedWorkerServer can be embedded to have forward compatible implementations.
type UnimplementedWorkerServer struct {
}

func (*UnimplementedWorkerServer) SendPrimeCountResult(ctx context.Context, req *TotalPrimesResponse) (*SimpleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPrimeCountResult not implemented")
}

func RegisterWorkerServer(s *grpc.Server, srv WorkerServer) {
	s.RegisterService(&_Worker_serviceDesc, srv)
}

func _Worker_SendPrimeCountResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TotalPrimesResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).SendPrimeCountResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/primer.Worker/SendPrimeCountResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).SendPrimeCountResult(ctx, req.(*TotalPrimesResponse))
	}
	return interceptor(ctx, in, info, handler)
}

var _Worker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "primer.Worker",
	HandlerType: (*WorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendPrimeCountResult",
			Handler:    _Worker_SendPrimeCountResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "primeCounter.proto",
}
